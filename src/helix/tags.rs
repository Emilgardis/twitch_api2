//! Endpoints regarding tags
//!
//! # Examples
//!
//! ```rust,no_run
//! # use twitch_api2::helix::{HelixClient, tags::GetAllStreamTagsRequest};
//! # #[tokio::main]
//! # async fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync + 'static>> {
//! # let token = twitch_oauth2::AccessToken::new("validtoken".to_string());
//! # let token = twitch_oauth2::UserToken::from_existing(twitch_oauth2::dummy_http_client, token, None).await?;
//! let client = HelixClient::new();
//! # let _: &HelixClient<twitch_api2::DummyHttpClient> = &client;
//! let req = GetAllStreamTagsRequest::builder()
//!     .build();
//!
//!
//! println!("{:?}", &client.req_get(req, &token).await?.data.get(0));
//! # Ok(())
//! # }
//! ```

#[doc(inline)]
pub use get_all_stream_tags::{GetAllStreamTagsRequest, Tag};

use crate::helix;
use serde::{Deserialize, Serialize};
use std::collections::BTreeMap;
use typed_builder::TypedBuilder;

/// Language code, formatted as 2 letter language by ISO 639-1, a dash (`-`) and 2 letter region by ISO 3166-1
///
/// i.e
/// `en-us`
/// `bg-bg`
/// etc etc
pub type Language = String;

/// Tag is auto-generated or not.
#[derive(Clone, Debug, PartialOrd, Eq, PartialEq, Deserialize, Serialize)]
#[serde(from = "bool")]
#[serde(into = "bool")]
pub enum AutoGenerated {
    /// Was auto-generated
    True,
    /// Was not auto-generated
    False,
}

impl From<bool> for AutoGenerated {
    fn from(v: bool) -> Self {
        match v {
            true => AutoGenerated::True,
            false => AutoGenerated::False,
        }
    }
}

impl From<AutoGenerated> for bool {
    fn from(v: AutoGenerated) -> Self {
        match v {
            AutoGenerated::True => true,
            AutoGenerated::False => false,
        }
    }
}
/// A stream tag as defined by Twitch.
#[derive(PartialEq, Deserialize, Debug, Clone)]
pub struct TwitchTag {
    /// ID of the tag.
    #[serde(alias = "tag_id")]
    pub id: String,
    /// true if the tag is auto-generated; otherwise, false . An auto-generated tag is one automatically applied by Twitch (e.g., a language tag based on the broadcaster’s settings); these cannot be added or removed by the user.
    pub is_auto: AutoGenerated,
    /// All localized names of the tag.
    pub localization_names: BTreeMap<Language, String>,
    /// All localized descriptions of the tag.
    pub localization_descriptions: BTreeMap<Language, String>,
}

/// Gets the list of all stream tags defined by Twitch, optionally filtered by tag ID(s).
/// [`get-all-stream-tags`](https://dev.twitch.tv/docs/api/reference#get-all-stream-tags)
pub mod get_all_stream_tags {
    use super::*;

    /// Query Parameters for [Get All Stream Tags](super::get_all_stream_tags)
    ///
    /// [`get-all-stream-tags`](https://dev.twitch.tv/docs/api/reference#get-all-stream-tags)
    #[derive(PartialEq, TypedBuilder, Deserialize, Serialize, Clone, Debug)]
    #[non_exhaustive]
    pub struct GetAllStreamTagsRequest {
        /// Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query.
        #[builder(default)]
        #[serde(skip_serializing_if = "Option::is_none")]
        pub after: Option<helix::Cursor>,
        /// Maximum number of objects to return. Maximum: 100. Default: 20.
        #[builder(default, setter(into))]
        #[serde(skip_serializing_if = "Option::is_none")]
        pub first: Option<usize>,
        /// ID of a tag. Multiple IDs can be specified. If provided, only the specified tag(s) is(are) returned. Maximum of 100.
        #[builder(default)]
        #[serde(skip_serializing_if = "Vec::is_empty")]
        pub tag_id: Vec<String>,
    }

    /// Return Values for [Get All Stream Tags](super::get_all_stream_tags)
    ///
    /// [`get-all-stream-tags`](https://dev.twitch.tv/docs/api/reference#get-all-stream-tags)
    pub type Tag = helix::tags::TwitchTag;

    impl helix::Request for GetAllStreamTagsRequest {
        type Response = Tag;

        const PATH: &'static str = "tags/streams";
        #[cfg(feature = "client")]
        const SCOPE: &'static [twitch_oauth2::Scope] = &[];
    }

    impl helix::RequestGet for GetAllStreamTagsRequest {}

    impl helix::Paginated for GetAllStreamTagsRequest {
        fn set_pagination(&mut self, cursor: helix::Cursor) { self.after = Some(cursor); }
    }

    #[test]
    fn parse_response() {
        use helix::*;
        let req = GetAllStreamTagsRequest::builder().first(3).build();

        // From twitch docs.
        let data = "\
{\n\
    \"data\": [\n\
        {\n\
            \"tag_id\": \"621fb5bf-5498-4d8f-b4ac-db4d40d401bf\",\n\
            \"is_auto\": false,\n\
            \"localization_names\": {\n\
                \"bg-bg\": \"Завършване без продължаване\",\n\
                \"cs-cz\": \"Na jeden z&aacute;tah\",\n\
                \"da-dk\": \"1 Continue klaret\",\n\
                \"de-de\": \"Mit nur 1 Leben\",\n\
                \"el-gr\": \"1 χωρίς συνέχεια\",\n\
                \"en-us\": \"1 Credit Clear\"\n\
            },\n\
            \"localization_descriptions\": {\n\
                \"bg-bg\": \"За потоци с акцент върху завършване на аркадна игра с монети, в която не се използва продължаване\",\n\
                \"cs-cz\": \"Pro vys&iacute;l&aacute;n&iacute; s důrazem na plněn&iacute; mincov&yacute;ch ark&aacute;dov&yacute;ch her bez použit&iacute; pokračov&aacute;n&iacute;.\",\n\
                \"da-dk\": \"Til streams med v&aelig;gt p&aring; at gennemf&oslash;re et arkadespil uden at bruge continues\",\n\
                \"de-de\": \"F&uuml;r Streams mit dem Ziel, ein Coin-op-Arcade-Game mit nur einem Leben abzuschlie&szlig;en.\",\n\
                \"el-gr\": \"Για μεταδόσεις με έμφαση στην ολοκλήρωση παλαιού τύπου ηλεκτρονικών παιχνιδιών που λειτουργούν με κέρμα, χωρίς να χρησιμοποιούν συνέχειες\",\n\
                \"en-us\": \"For streams with an emphasis on completing a coin-op arcade game without using any continues\"\n\
            }\n\
        },\n\
        {\n\
            \"tag_id\": \"7b49f69a-5d95-4c94-b7e3-66e2c0c6f6c6\",\n\
            \"is_auto\": false,\n\
            \"localization_names\": {\n\
                \"bg-bg\": \"Дизайн\",\n\
                \"cs-cz\": \"Design\",\n\
                \"da-dk\": \"Design\",\n\
                \"de-de\": \"Design\",\n\
                \"el-gr\": \"Σχέδιο\",\n\
                \"en-us\": \"Design\"\n\
            },\n\
            \"localization_descriptions\": {\n\
                \"en-us\": \"For streams with an emphasis on the creative process of designing an object or system\"\n\
            }\n\
        },\n\
        {\n\
            \"tag_id\": \"1c628b75-b1c3-4a2f-9d1d-056c1f555f0e\",\n\
            \"is_auto\": true,\n\
            \"localization_names\": {\n\
                \"bg-bg\": \"Ð¨Ð°Ð¼Ð¿Ð¸Ð¾Ð½: Lux\",\n\
                \"cs-cz\": \"Å ampion: Lux\",\n\
                \"da-dk\": \"Champion: Lux\"\n\
            },\n\
            \"localization_descriptions\": {\n\
                \"en-us\": \"For streams featuring the champion Lux in League of Legends\"\n\
            }\n\
        }\n\
    ],\n\
    \"pagination\": {\n\
        \"cursor\": \"eyJiIjpudWxsLCJhIjp7IkN1cnNvciI6ImV5SnBaQ0k2ZXlKQ0lqcHVkV3hzTENKQ1QwOU1JanB1ZFd4c0xDS kNVeUk2Ym5Wc2JDd2lUQ0k2Ym5Wc2JDd2lUU0k2Ym5Wc2JDd2lUaUk2Ym5Wc2JDd2lUbE1pT201MWJHd3NJazV WVEV3aU9tNTFiR3dzSWxNaU9pSXhZell5T0dJM05TMWlNV016TFRSaE1tWXRPV1F4WkMwd05UWmpNV1kxTlRWb U1HVWlMQ0pUVXlJNmJuVnNiSDE5In19\"\n\
    }\n\
}\n\
"
        .as_bytes().to_vec();

        let http_response = http::Response::builder().body(data).unwrap();

        let uri = req.get_uri().unwrap();

        dbg!(req.parse_response(&uri, http_response).unwrap());
    }
}
